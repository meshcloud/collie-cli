import {
  Dir,
  DirectoryGenerator,
  WriteMode,
} from "../../cli/DirectoryGenerator.ts";
import { Logger } from "../../cli/Logger.ts";
import { TerraformDocsCliFacade } from "../../api/terraform-docs/TerraformDocsCliFacade.ts";
import { indent } from "../../cli/indent.ts";
import { convertToPosixPath } from "../../path.ts";
import * as path from "std/path";

export async function newKitDirectoryCreation(
  modulePath: string,
  name: string,
  logger: Logger,
) {
  const dir = new DirectoryGenerator(WriteMode.skip, logger);
  const d: Dir = {
    name: modulePath,
    entries: [
      { name: "main.tf", content: mainTf },
      {
        name: "documentation.tf",
        content: generateDocumentationTf(),
      },
      { name: "README.md", content: generateReadmeMd(name) },
      { name: "variables.tf", content: "" },
      { name: "outputs.tf", content: "" },
    ],
  };

  await dir.write(d);
}

const mainTf = `# Place your module's terraform resources here as usual.
# Note that you should typically not put a terraform{} block into cloud foundation kit modules,
# these will be provided by the platform implementations using this kit module.
`;

const documentationTf =
  `This documentation is intended as a summary of resources deployed and managed by this module for landing zone consumers
and security auditors. This documentation will be included in the markdown documentation generated by \`collie foundation docs\`.

### TODO

TODO: describe the deployed resources and its configuration in a human-friendly way.

::: tip
Here are some useful tips

- Use proper \`markdown\`.
- Use h3 and h4 level headings to add sections to the kit module description
- You can use terraform variables, resources and outputs defined anywhere in this terraform module, to templatise it like \`\${var.my_input_var}\`
- Leverage terraform's \`templatefile()\` function for more complex templates
:::`;

export function generateDocumentationTf(content = documentationTf) {
  return `output "documentation_md" {
  value  = <<EOF
${content}
EOF
}
`;
}

function generateReadmeMd(moduleName: string) {
  return `---
name: ${moduleName}
summary: |
  deploys new cloud foundation infrastructure.
  Add a concise description of the module's purpose here.
# optional: add additional metadata about implemented security controls
---

# ${moduleName}

This documentation is intended as a reference documentation for cloud foundation or platform engineers using this module.
    `;
}

export async function generateTerragrunt(
  kitModulePath: string,
  terraformDocs: TerraformDocsCliFacade,
) {
  const isBootstrap = kitModulePath.endsWith(`${path.SEPARATOR}bootstrap`);

  // terragrunt needs a posix style path
  const posixKitModulePath = convertToPosixPath(kitModulePath);

  const platformIncludeBlock = `include "platform" {
  path = find_in_parent_folders("platform.hcl")
  expose = true
}`;

  const providerBlock =
    `# todo: setup providers as needed by your kit module, typically referencing outputs of the bootstrap module
# note: this block is generated as a fallback, since the kit module provided no explicit terragrunt.hcl template
generate "provider" {
  path      = "provider.tf"
  if_exists = "overwrite"
  contents  = <<EOF
# todo: add provider {} blocks as needed
EOF
}`;

  const bootstrapProviderBlock =
    `# todo: this is a bootstrap module, you typically want to set up a provider
# with user credentials (cloud CLI based authentication) here
generate "provider" {
  path      = "provider.tf"
  if_exists = "overwrite"
  contents  = <<EOF
provider "google|aws|azurerm" {
  # todo
}
EOF
}`;

  const terraformBlock = `terraform {
  source = "\${get_repo_root()}//${posixKitModulePath}"
}`;

  const tfvars = await terraformDocs.generateTfvars(kitModulePath);
  const inputsBlock = `inputs = {
  # todo: set input variables
${indent(tfvars, 2)}
}`;

  return [
    platformIncludeBlock,
    isBootstrap ? bootstrapProviderBlock : providerBlock,
    terraformBlock,
    inputsBlock,
  ].join("\n\n");
}
